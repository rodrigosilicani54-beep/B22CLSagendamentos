
import React, { useState, useEffect } from "react";
import { Professional, Substitution } from "@/entities/all";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { 
  History as HistoryIcon, 
  Search, 
  Filter,
  Calendar,
  Users,
  TrendingUp,
  CheckCircle,
  XCircle,
  Clock
} from "lucide-react";

export default function History() {
  const [substitutions, setSubstitutions] = useState([]);
  const [professionals, setProfessionals] = useState([]);
  const [filteredSubstitutions, setFilteredSubstitutions] = useState([]);
  const [loading, setLoading] = useState(true);
  
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [dateFilter, setDateFilter] = useState('');

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setLoading(true);
    try {
      const [subsData, profsData] = await Promise.all([
        Substitution.list('-created_date'),
        Professional.list()
      ]);
      
      setSubstitutions(subsData);
      setProfessionals(profsData);
    } catch (error) {
      console.error("Error loading history data:", error);
    }
    setLoading(false);
  };

  const filterSubstitutions = React.useCallback(() => {
    let filtered = substitutions;

    if (searchTerm) {
      filtered = filtered.filter(sub => {
        const absentProf = professionals.find(p => p.id === sub.absent_professional_id);
        const substituteProf = professionals.find(p => p.id === sub.substitute_professional_id);
        
        return (
          absentProf?.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          substituteProf?.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          sub.notes?.toLowerCase().includes(searchTerm.toLowerCase())
        );
      });
    }

    if (statusFilter) {
      filtered = filtered.filter(sub => sub.status === statusFilter);
    }

    if (dateFilter) {
      filtered = filtered.filter(sub => 
        sub.absence_date.startsWith(dateFilter)
      );
    }

    setFilteredSubstitutions(filtered);
  }, [substitutions, professionals, searchTerm, statusFilter, dateFilter]);

  useEffect(() => {
    filterSubstitutions();
  }, [filterSubstitutions]);

  const getStatusStats = () => {
    const stats = {
      total: substitutions.length,
      confirmed: substitutions.filter(s => s.status === 'Confirmado').length,
      pending: substitutions.filter(s => s.status === 'Pendente').length,
      rejected: substitutions.filter(s => s.status === 'Rejeitado').length
    };
    
    stats.successRate = stats.total > 0 ? Math.round((stats.confirmed / stats.total) * 100) : 0;
    
    return stats;
  };

  const getMonthlyTrend = () => {
    const currentMonth = new Date().getMonth();
    const currentYear = new Date().getFullYear();
    
    const thisMonth = substitutions.filter(sub => {
      const subDate = new Date(sub.created_date);
      return subDate.getMonth() === currentMonth && subDate.getFullYear() === currentYear;
    }).length;
    
    const lastMonth = substitutions.filter(sub => {
      const subDate = new Date(sub.created_date);
      const lastMonthDate = currentMonth === 0 ? 11 : currentMonth - 1;
      const lastMonthYear = currentMonth === 0 ? currentYear - 1 : currentYear;
      return subDate.getMonth() === lastMonthDate && subDate.getFullYear() === lastMonthYear;
    }).length;
    
    return { thisMonth, lastMonth, trend: lastMonth > 0 ? ((thisMonth - lastMonth) / lastMonth * 100) : 0 };
  };

  const stats = getStatusStats();
  const monthlyTrend = getMonthlyTrend();

  return (
    <div className="p-6 md:p-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-800 to-pink-700 bg-clip-text text-transparent mb-2">
            Histórico de Substituições
          </h1>
          <p className="text-gray-600">Acompanhe todas as substituições realizadas na clínica</p>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card className="border-0 shadow-lg bg-gradient-to-br from-blue-500 to-blue-600 text-white">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-blue-100">
                Total de Substituições
              </CardTitle>
              <HistoryIcon className="h-5 w-5 text-blue-200" />
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold">{stats.total}</div>
              <p className="text-xs text-blue-200 flex items-center mt-1">
                <TrendingUp className="w-3 h-3 mr-1" />
                {monthlyTrend.thisMonth} este mês
              </p>
            </CardContent>
          </Card>

          <Card className="border-0 shadow-lg bg-gradient-to-br from-green-500 to-green-600 text-white">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-green-100">
                Confirmadas
              </CardTitle>
              <CheckCircle className="h-5 w-5 text-green-200" />
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold">{stats.confirmed}</div>
              <p className="text-xs text-green-200">
                {stats.successRate}% taxa de sucesso
              </p>
            </CardContent>
          </Card>

          <Card className="border-0 shadow-lg bg-gradient-to-br from-yellow-500 to-yellow-600 text-white">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-yellow-100">
                Pendentes
              </CardTitle>
              <Clock className="h-5 w-5 text-yellow-200" />
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold">{stats.pending}</div>
              <p className="text-xs text-yellow-200">
                Aguardando resolução
              </p>
            </CardContent>
          </Card>

          <Card className="border-0 shadow-lg bg-gradient-to-br from-red-500 to-red-600 text-white">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-red-100">
                Rejeitadas
              </CardTitle>
              <XCircle className="h-5 w-5 text-red-200" />
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold">{stats.rejected}</div>
              <p className="text-xs text-red-200">
                Não efetivadas
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Filters */}
        <Card className="mb-6 border-0 shadow-lg bg-white/80 backdrop-blur-sm">
          <CardHeader>
            <CardTitle className="text-lg flex items-center gap-2">
              <Filter className="w-5 h-5 text-purple-600" />
              Filtros
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                <Input
                  placeholder="Buscar por profissional..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
              
              <Select value={statusFilter} onValueChange={setStatusFilter}>
                <SelectTrigger>
                  <SelectValue placeholder="Status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value={null}>Todos</SelectItem>
                  <SelectItem value="Pendente">Pendente</SelectItem>
                  <SelectItem value="Confirmado">Confirmado</SelectItem>
                  <SelectItem value="Rejeitado">Rejeitado</SelectItem>
                  <SelectItem value="Em Análise">Em Análise</SelectItem>
                </SelectContent>
              </Select>

              <Input
                type="date"
                value={dateFilter}
                onChange={(e) => setDateFilter(e.target.value)}
                placeholder="Data da ausência"
              />
            </div>
            
            <div className="flex items-center justify-between mt-4 text-sm text-gray-600">
              <span>{filteredSubstitutions.length} substituições encontradas</span>
              {(searchTerm || statusFilter || dateFilter) && (
                <button
                  onClick={() => {
                    setSearchTerm('');
                    setStatusFilter('');
                    setDateFilter('');
                  }}
                  className="text-purple-600 hover:text-purple-700 font-medium"
                >
                  Limpar filtros
                </button>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Substitutions List */}
        <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
          <CardHeader>
            <CardTitle className="text-xl flex items-center gap-2">
              <Calendar className="w-5 h-5 text-gray-600" />
              Histórico Detalhado
            </CardTitle>
          </CardHeader>
          <CardContent>
            {loading ? (
              <div className="space-y-4">
                {[...Array(8)].map((_, i) => (
                  <div key={i} className="animate-pulse bg-gray-200 h-24 rounded-lg"></div>
                ))}
              </div>
            ) : filteredSubstitutions.length > 0 ? (
              <div className="space-y-4">
                {filteredSubstitutions.map((sub) => {
                  const absentProf = professionals.find(p => p.id === sub.absent_professional_id);
                  const substituteProf = professionals.find(p => p.id === sub.substitute_professional_id);
                  
                  return (
                    <div key={sub.id} className="border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow">
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 rounded-full bg-purple-500"></div>
                          <span className="text-sm text-gray-500">
                            {new Date(sub.created_date).toLocaleString('pt-BR')}
                          </span>
                        </div>
                        <Badge variant={
                          sub.status === 'Confirmado' ? 'default' :
                          sub.status === 'Pendente' ? 'secondary' :
                          sub.status === 'Em Análise' ? 'outline' : 'destructive'
                        }>
                          {sub.status}
                        </Badge>
                      </div>
                      
                      <div className="grid md:grid-cols-2 gap-6">
                        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                          <h4 className="font-medium text-red-800 mb-2 flex items-center gap-2">
                            <XCircle className="w-4 h-4" />
                            Profissional Ausente
                          </h4>
                          <p className="font-semibold text-red-700">
                            {absentProf?.name || 'Profissional removido'}
                          </p>
                          <p className="text-sm text-red-600">
                            {absentProf?.specialty} - {absentProf?.career_level}
                          </p>
                          <div className="mt-2 text-sm text-red-600">
                            <strong>Data:</strong> {new Date(sub.absence_date).toLocaleDateString('pt-BR')} <br />
                            <strong>Horário:</strong> {sub.absence_time}
                          </div>
                        </div>
                        
                        {substituteProf ? (
                          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                            <h4 className="font-medium text-green-800 mb-2 flex items-center gap-2">
                              <CheckCircle className="w-4 h-4" />
                              Substituto
                            </h4>
                            <p className="font-semibold text-green-700">
                              {substituteProf.name}
                            </p>
                            <p className="text-sm text-green-600">
                              {substituteProf.specialty} - {substituteProf.career_level}
                            </p>
                            {sub.compatibility_score && (
                              <div className="mt-2">
                                <Badge className="bg-green-100 text-green-800">
                                  {sub.compatibility_score}% compatível
                                </Badge>
                              </div>
                            )}
                          </div>
                        ) : (
                          <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 flex items-center justify-center">
                            <div className="text-center text-gray-500">
                              <Users className="w-8 h-8 mx-auto mb-2 opacity-50" />
                              <p className="text-sm">Substituto não selecionado</p>
                            </div>
                          </div>
                        )}
                      </div>
                      
                      {sub.priority_reason && (
                        <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                          <p className="text-sm text-blue-700">
                            <strong>Critério aplicado:</strong> {sub.priority_reason}
                          </p>
                          {sub.priority_rule && (
                            <p className="text-xs text-blue-600 mt-1">
                              Regra de prioridade #{sub.priority_rule}
                            </p>
                          )}
                        </div>
                      )}
                      
                      {sub.notes && (
                        <div className="mt-4 p-3 bg-gray-50 border border-gray-200 rounded-lg">
                          <p className="text-sm text-gray-700">
                            <strong>Observações:</strong> {sub.notes}
                          </p>
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            ) : (
              <div className="text-center py-12 text-gray-500">
                <HistoryIcon className="w-12 h-12 mx-auto mb-4 opacity-50" />
                <h3 className="text-lg font-semibold text-gray-700 mb-2">
                  Nenhuma substituição encontrada
                </h3>
                <p>
                  {searchTerm || statusFilter || dateFilter 
                    ? "Tente ajustar os filtros para encontrar substituições"
                    : "O histórico aparecerá aqui conforme as substituições forem criadas"
                  }
                </p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
