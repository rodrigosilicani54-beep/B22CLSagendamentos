import React, { useState, useEffect } from "react";
import { Professional, Schedule, Substitution } from "@/entities/all";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { 
  Users, 
  Calendar, 
  Clock, 
  AlertCircle, 
  Plus, 
  Upload,
  TrendingUp,
  CheckCircle
} from "lucide-react";

export default function Dashboard() {
  const [professionals, setProfessionals] = useState([]);
  const [schedules, setSchedules] = useState([]);
  const [substitutions, setSubstitutions] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadDashboardData();
  }, []);

  const loadDashboardData = async () => {
    setLoading(true);
    try {
      const [profsData, schedulesData, substitutionsData] = await Promise.all([
        Professional.list(),
        Schedule.list('-created_date', 50),
        Substitution.list('-created_date', 10)
      ]);
      
      setProfessionals(profsData);
      setSchedules(schedulesData);
      setSubstitutions(substitutionsData);
    } catch (error) {
      console.error("Error loading dashboard data:", error);
    }
    setLoading(false);
  };

  const getActiveSubstitutions = () => {
    return substitutions.filter(sub => sub.status === 'Pendente' || sub.status === 'Em Análise').length;
  };

  const getWeeklyScheduleCount = () => {
    const today = new Date();
    const startOfWeek = new Date(today.setDate(today.getDate() - today.getDay()));
    const weekReference = startOfWeek.toISOString().split('T')[0];
    
    return schedules.filter(schedule => 
      schedule.week_reference === weekReference ||
      !schedule.week_reference // fallback for older records
    ).length;
  };

  const getSpecialtyDistribution = () => {
    const distribution = {};
    professionals.forEach(prof => {
      distribution[prof.specialty] = (distribution[prof.specialty] || 0) + 1;
    });
    return Object.entries(distribution).slice(0, 4);
  };

  return (
    <div className="p-6 md:p-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-purple-800 to-pink-700 bg-clip-text text-transparent mb-2">
            Sistema de Reagendamento Inteligente
          </h1>
          <p className="text-gray-600 text-lg">Gerencie reagendamentos de forma automática e inteligente</p>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <Card className="border-0 shadow-lg bg-gradient-to-br from-purple-500 to-purple-600 text-white">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-purple-100">
                Profissionais Ativos
              </CardTitle>
              <Users className="h-5 w-5 text-purple-200" />
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold">
                {loading ? '...' : professionals.filter(p => p.active).length}
              </div>
              <p className="text-xs text-purple-200 flex items-center mt-1">
                <TrendingUp className="w-3 h-3 mr-1" />
                Total cadastrados: {professionals.length}
              </p>
            </CardContent>
          </Card>

          <Card className="border-0 shadow-lg bg-gradient-to-br from-pink-500 to-pink-600 text-white">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-pink-100">
                Agendamentos da Semana
              </CardTitle>
              <Calendar className="h-5 w-5 text-pink-200" />
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold">
                {loading ? '...' : getWeeklyScheduleCount()}
              </div>
              <p className="text-xs text-pink-200">
                Total geral: {schedules.length}
              </p>
            </CardContent>
          </Card>

          <Card className="border-0 shadow-lg bg-gradient-to-br from-orange-500 to-orange-600 text-white">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-orange-100">
                Substituições Ativas
              </CardTitle>
              <AlertCircle className="h-5 w-5 text-orange-200" />
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold">
                {loading ? '...' : getActiveSubstitutions()}
              </div>
              <p className="text-xs text-orange-200">
                Pendentes de resolução
              </p>
            </CardContent>
          </Card>

          <Card className="border-0 shadow-lg bg-gradient-to-br from-green-500 to-green-600 text-white">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-green-100">
                Taxa de Sucesso
              </CardTitle>
              <CheckCircle className="h-5 w-5 text-green-200" />
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold">
                {loading ? '...' : Math.round((substitutions.filter(s => s.status === 'Confirmado').length / (substitutions.length || 1)) * 100)}%
              </div>
              <p className="text-xs text-green-200">
                Substituições confirmadas
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Quick Actions */}
        <div className="grid lg:grid-cols-3 gap-6 mb-8">
          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
            <CardHeader className="text-center pb-4">
              <CardTitle className="text-xl text-gray-800 flex items-center justify-center gap-2">
                <Upload className="w-6 h-6 text-purple-600" />
                Importar Planilha
              </CardTitle>
            </CardHeader>
            <CardContent className="text-center">
              <p className="text-gray-600 mb-4">
                Carregue planilhas Excel com os horários dos profissionais
              </p>
              <Link to={createPageUrl("ImportSchedule")}>
                <Button className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-medium">
                  <Upload className="w-4 h-4 mr-2" />
                  Importar Agora
                </Button>
              </Link>
            </CardContent>
          </Card>

          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
            <CardHeader className="text-center pb-4">
              <CardTitle className="text-xl text-gray-800 flex items-center justify-center gap-2">
                <Calendar className="w-6 h-6 text-blue-600" />
                Novo Reagendamento
              </CardTitle>
            </CardHeader>
            <CardContent className="text-center">
              <p className="text-gray-600 mb-4">
                Inicie o processo inteligente de substituição
              </p>
              <Link to={createPageUrl("Substitutions")}>
                <Button className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-medium">
                  <Plus className="w-4 h-4 mr-2" />
                  Criar Substituição
                </Button>
              </Link>
            </CardContent>
          </Card>

          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
            <CardHeader className="text-center pb-4">
              <CardTitle className="text-xl text-gray-800 flex items-center justify-center gap-2">
                <Users className="w-6 h-6 text-green-600" />
                Gerenciar Equipe
              </CardTitle>
            </CardHeader>
            <CardContent className="text-center">
              <p className="text-gray-600 mb-4">
                Visualize e gerencie todos os profissionais
              </p>
              <Link to={createPageUrl("Professionals")}>
                <Button className="w-full bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white font-medium">
                  <Users className="w-4 h-4 mr-2" />
                  Ver Profissionais
                </Button>
              </Link>
            </CardContent>
          </Card>
        </div>

        {/* Recent Activity & Specialty Distribution */}
        <div className="grid lg:grid-cols-2 gap-6">
          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="text-xl text-gray-800 flex items-center gap-2">
                <Clock className="w-5 h-5 text-gray-600" />
                Substituições Recentes
              </CardTitle>
            </CardHeader>
            <CardContent>
              {loading ? (
                <div className="space-y-3">
                  {[...Array(3)].map((_, i) => (
                    <div key={i} className="animate-pulse bg-gray-200 h-16 rounded-lg"></div>
                  ))}
                </div>
              ) : substitutions.length > 0 ? (
                <div className="space-y-3">
                  {substitutions.slice(0, 5).map((sub) => (
                    <div key={sub.id} className="flex items-center justify-between p-3 border border-gray-100 rounded-lg hover:bg-gray-50 transition-colors">
                      <div>
                        <p className="font-medium text-gray-800">
                          Ausência em {new Date(sub.absence_date).toLocaleDateString('pt-BR')}
                        </p>
                        <p className="text-sm text-gray-600">
                          {sub.absence_time} - {sub.priority_reason || 'Processando...'}
                        </p>
                      </div>
                      <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                        sub.status === 'Confirmado' ? 'bg-green-100 text-green-800' :
                        sub.status === 'Pendente' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-red-100 text-red-800'
                      }`}>
                        {sub.status}
                      </span>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500 text-center py-8">
                  Nenhuma substituição registrada ainda
                </p>
              )}
            </CardContent>
          </Card>

          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="text-xl text-gray-800 flex items-center gap-2">
                <Users className="w-5 h-5 text-gray-600" />
                Distribuição por Especialidade
              </CardTitle>
            </CardHeader>
            <CardContent>
              {loading ? (
                <div className="space-y-3">
                  {[...Array(4)].map((_, i) => (
                    <div key={i} className="animate-pulse bg-gray-200 h-12 rounded-lg"></div>
                  ))}
                </div>
              ) : (
                <div className="space-y-4">
                  {getSpecialtyDistribution().map(([specialty, count]) => (
                    <div key={specialty} className="flex items-center justify-between">
                      <span className="text-gray-700 font-medium">{specialty}</span>
                      <div className="flex items-center gap-2">
                        <div className="w-20 bg-gray-200 rounded-full h-2">
                          <div 
                            className="bg-gradient-to-r from-purple-500 to-pink-500 h-2 rounded-full"
                            style={{width: `${(count / professionals.length) * 100}%`}}
                          ></div>
                        </div>
                        <span className="text-sm font-bold text-gray-600 w-6">{count}</span>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}