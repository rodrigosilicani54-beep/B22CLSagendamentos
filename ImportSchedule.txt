import React, { useState, useRef } from "react";
import { Professional, Schedule } from "@/entities/all";
import { ExtractDataFromUploadedFile, UploadFile } from "@/integrations/Core";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Progress } from "@/components/ui/progress";
import { 
  Upload, 
  FileSpreadsheet, 
  CheckCircle, 
  AlertCircle, 
  Camera,
  ArrowLeft 
} from "lucide-react";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";

export default function ImportSchedule() {
  const navigate = useNavigate();
  const [files, setFiles] = useState([]);
  const [processing, setProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [results, setResults] = useState([]);
  const [error, setError] = useState(null);
  const [dragActive, setDragActive] = useState(false);
  const fileInputRef = useRef(null);

  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    const droppedFiles = Array.from(e.dataTransfer.files).filter(
      file => file.name.endsWith('.xlsx') || file.name.endsWith('.xls')
    );
    
    if (droppedFiles.length === 0) {
      setError("Por favor, selecione apenas arquivos Excel (.xlsx ou .xls)");
      return;
    }
    
    setFiles(prev => [...prev, ...droppedFiles]);
    setError(null);
  };

  const handleFileSelect = (e) => {
    const selectedFiles = Array.from(e.target.files).filter(
      file => file.name.endsWith('.xlsx') || file.name.endsWith('.xls')
    );
    
    if (selectedFiles.length === 0) {
      setError("Por favor, selecione apenas arquivos Excel (.xlsx ou .xls)");
      return;
    }
    
    setFiles(prev => [...prev, ...selectedFiles]);
    setError(null);
  };

  const removeFile = (index) => {
    setFiles(prev => prev.filter((_, i) => i !== index));
  };

  const processFiles = async () => {
    if (files.length === 0) return;
    
    setProcessing(true);
    setProgress(0);
    setResults([]);
    
    try {
      const totalFiles = files.length;
      const processResults = [];
      
      for (let i = 0; i < totalFiles; i++) {
        const file = files[i];
        setProgress((i / totalFiles) * 50);
        
        // Upload file
        const { file_url } = await UploadFile({ file });
        
        // Extract data
        const extractResult = await ExtractDataFromUploadedFile({
          file_url,
          json_schema: {
            type: "object",
            properties: {
              professionals: {
                type: "array",
                items: {
                  type: "object", 
                  properties: {
                    name: { type: "string" },
                    specialty: { type: "string" },
                    career_level: { type: "string" },
                    is_formed: { type: "boolean" },
                    schedules: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          day_of_week: { type: "string" },
                          time_slot: { type: "string" },
                          activity: { type: "string" },
                          activity_type: { type: "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        });
        
        setProgress(50 + ((i + 1) / totalFiles) * 50);
        
        if (extractResult.status === "success" && extractResult.output) {
          processResults.push({
            file: file.name,
            data: extractResult.output,
            success: true
          });
        } else {
          processResults.push({
            file: file.name,
            error: extractResult.details || "Erro ao processar arquivo",
            success: false
          });
        }
      }
      
      setResults(processResults);
      
    } catch (error) {
      setError("Erro durante o processamento: " + error.message);
    }
    
    setProcessing(false);
    setProgress(100);
  };

  const saveToDatabase = async () => {
    const successfulResults = results.filter(r => r.success);
    let totalSaved = 0;
    
    try {
      for (const result of successfulResults) {
        const professionals = result.data.professionals || [];
        
        for (const profData of professionals) {
          // Create or update professional
          const professional = await Professional.create({
            name: profData.name,
            specialty: profData.specialty,
            career_level: profData.career_level,
            is_formed: profData.is_formed !== false,
            active: true
          });
          
          // Create schedules
          const schedules = profData.schedules || [];
          for (const scheduleData of schedules) {
            await Schedule.create({
              professional_id: professional.id,
              day_of_week: scheduleData.day_of_week,
              time_slot: scheduleData.time_slot,
              activity: scheduleData.activity,
              activity_type: scheduleData.activity_type,
              is_patient: isPatientAppointment(scheduleData.activity),
              week_reference: new Date().toISOString().split('T')[0]
            });
            totalSaved++;
          }
        }
      }
      
      alert(`✅ Importação concluída!\n\n${totalSaved} agendamentos salvos com sucesso.`);
      navigate(createPageUrl("Dashboard"));
      
    } catch (error) {
      setError("Erro ao salvar no banco de dados: " + error.message);
    }
  };

  const isPatientAppointment = (activity) => {
    const activityLower = activity.toLowerCase().trim();
    const hasProperName = /^[A-ZÁÀÂÃÉÈÊÍÌÎÓÒÔÕÚÙÛÇ][a-záàâãéèêíìîóòôõúùûç]+(\s+[A-ZÁÀÂÃÉÈÊÍÌÎÓÒÔÕÚÙÛÇ][a-záàâãéèêíìîóòôõúùûç]+)+$/i.test(activity.trim());
    const genericActivities = ['cls', 'análise', 'supervisão', 'treinamento', 'reunião', 'almoço'];
    const isGeneric = genericActivities.some(generic => activityLower.includes(generic));
    return hasProperName && !isGeneric;
  };

  return (
    <div className="p-6 md:p-8">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="flex items-center gap-4 mb-8">
          <Button
            variant="outline"
            size="icon"
            onClick={() => navigate(createPageUrl("Dashboard"))}
          >
            <ArrowLeft className="w-4 h-4" />
          </Button>
          <div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-800 to-pink-700 bg-clip-text text-transparent">
              Importar Planilha de Horários
            </h1>
            <p className="text-gray-600">Carregue arquivos Excel com os agendamentos dos profissionais</p>
          </div>
        </div>

        {error && (
          <Alert variant="destructive" className="mb-6">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {/* Upload Area */}
        <Card className="mb-6 border-0 shadow-lg bg-white/80 backdrop-blur-sm">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileSpreadsheet className="w-5 h-5 text-purple-600" />
              Upload de Arquivos Excel
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div
              className={`border-2 border-dashed rounded-xl p-8 text-center transition-all ${
                dragActive 
                  ? "border-purple-400 bg-purple-50" 
                  : "border-gray-300 hover:border-purple-400 hover:bg-purple-50/30"
              }`}
              onDragEnter={handleDrag}
              onDragLeave={handleDrag}
              onDragOver={handleDrag}
              onDrop={handleDrop}
            >
              <input
                ref={fileInputRef}
                type="file"
                multiple
                accept=".xlsx,.xls"
                onChange={handleFileSelect}
                className="hidden"
              />
              
              <div className="space-y-4">
                <div className="w-16 h-16 mx-auto bg-gradient-to-r from-purple-100 to-pink-100 rounded-full flex items-center justify-center">
                  <Upload className="w-8 h-8 text-purple-600" />
                </div>
                
                <div>
                  <h3 className="text-lg font-semibold text-gray-800 mb-2">
                    Arraste arquivos Excel aqui
                  </h3>
                  <p className="text-gray-600 mb-4">
                    Ou clique para selecionar arquivos (.xlsx, .xls)
                  </p>
                  
                  <Button
                    onClick={() => fileInputRef.current?.click()}
                    className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
                  >
                    <Upload className="w-4 h-4 mr-2" />
                    Selecionar Arquivos
                  </Button>
                </div>
              </div>
            </div>

            {/* File List */}
            {files.length > 0 && (
              <div className="mt-6 space-y-3">
                <h4 className="font-medium text-gray-800">Arquivos selecionados ({files.length})</h4>
                {files.map((file, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center gap-3">
                      <FileSpreadsheet className="w-5 h-5 text-green-600" />
                      <div>
                        <p className="font-medium text-gray-800">{file.name}</p>
                        <p className="text-sm text-gray-500">
                          {(file.size / 1024 / 1024).toFixed(2)} MB
                        </p>
                      </div>
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => removeFile(index)}
                      className="text-red-600 hover:text-red-700 hover:bg-red-50"
                    >
                      Remover
                    </Button>
                  </div>
                ))}
                
                <Button
                  onClick={processFiles}
                  disabled={processing}
                  className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700"
                >
                  {processing ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      Processando...
                    </>
                  ) : (
                    "Processar Arquivos"
                  )}
                </Button>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Processing Progress */}
        {processing && (
          <Card className="mb-6 border-0 shadow-lg">
            <CardContent className="p-6">
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">Processando arquivos...</span>
                  <span className="text-sm text-gray-500">{Math.round(progress)}%</span>
                </div>
                <Progress value={progress} className="w-full" />
              </div>
            </CardContent>
          </Card>
        )}

        {/* Results */}
        {results.length > 0 && (
          <Card className="mb-6 border-0 shadow-lg bg-white/80 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <CheckCircle className="w-5 h-5 text-green-600" />
                Resultados do Processamento
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {results.map((result, index) => (
                  <div key={index} className={`p-4 rounded-lg border ${
                    result.success ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'
                  }`}>
                    <div className="flex items-start justify-between">
                      <div className="flex items-center gap-2">
                        {result.success ? (
                          <CheckCircle className="w-5 h-5 text-green-600" />
                        ) : (
                          <AlertCircle className="w-5 h-5 text-red-600" />
                        )}
                        <div>
                          <p className={`font-medium ${result.success ? 'text-green-800' : 'text-red-800'}`}>
                            {result.file}
                          </p>
                          {result.success ? (
                            <p className="text-sm text-green-600">
                              {result.data.professionals?.length || 0} profissionais encontrados
                            </p>
                          ) : (
                            <p className="text-sm text-red-600">{result.error}</p>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}

                {results.some(r => r.success) && (
                  <Button
                    onClick={saveToDatabase}
                    className="w-full bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700"
                  >
                    <CheckCircle className="w-4 h-4 mr-2" />
                    Salvar no Sistema
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Instructions */}
        <Card className="border-0 shadow-lg bg-gradient-to-br from-blue-50 to-indigo-50">
          <CardHeader>
            <CardTitle className="text-lg text-blue-800">
              📋 Estrutura Esperada da Planilha
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <h4 className="font-semibold text-blue-800 mb-2">Dados do Profissional:</h4>
                <ul className="text-sm text-blue-700 space-y-1">
                  <li><strong>B1:</strong> Nome do Profissional</li>
                  <li><strong>D1:</strong> Especialidade</li>
                  <li><strong>E1:</strong> Nível do Cargo</li>
                  <li><strong>F1:</strong> Formado (Sim/Não)</li>
                </ul>
              </div>
              <div>
                <h4 className="font-semibold text-blue-800 mb-2">Agendamentos:</h4>
                <ul className="text-sm text-blue-700 space-y-1">
                  <li><strong>B3-B16:</strong> Horários (07:00-19:00)</li>
                  <li><strong>C3-H16:</strong> Segunda a Sábado</li>
                  <li>Cores identificam tipos de atividade</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}